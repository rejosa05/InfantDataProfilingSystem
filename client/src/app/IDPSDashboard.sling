import jk.widget.common
import jk.widget
import jk.widget.datagrid

class is TitledWidget #widget:

ui LayerWidget
{
	CanvasWidget {
		color = Color.forString("#CCCCCC")
	}
	VerticalBoxWidget {
		margin = context.getHeightValue("1mm")
		spacing = context.getHeightValue("1mm")
        LabelWidget submitMessage{
            text = "All Infants"
            textAlign = LabelWidget.ALIGN_CENTER
        }
		DataGridWidget grid : 1.0 {
		}
        ButtonWidget viewEmployee {
			text = "Authorized Employee"
			clickHandler = func {
                var thisWidget final = this
                var nav = NavigationWidget.findNavigationWidget(thisWidget)
                nav.popWidget()
                nav.pushWidget(new IDPSUserd(context))
			}
		}
		ButtonWidget addInfant {
			text = "Add Infants"
			clickHandler = func {
				var thisWidget final = this
                var nav = NavigationWidget.findNavigationWidget(thisWidget)
                nav.popWidget()
                nav.pushWidget(new IDPSAdd(context))
			}
		}
        ButtonWidget addEmployee {
			text = "Add Employeee"
			clickHandler = func {
                var thisWidget final = this
                var nav = NavigationWidget.findNavigationWidget(thisWidget)
                nav.popWidget()
                nav.pushWidget(new IDPSRegistration(context))
			}
		}
        ButtonWidget logOut {
			text = "Log Out"
			clickHandler = func {
                var thisWidget final = this
                var nav = NavigationWidget.findNavigationWidget(thisWidget)
                nav.popWidget()
                nav.pushWidget(new IDPSLogin(context))
			}
		}
	}
}

func initializeWidget override
{
	base.initializeWidget()
	grid.addColumn("Id", "id", .5)
	grid.addColumn("Last Name", "name", 1.0)
    grid.addColumn("First Name", "lname", 1.0)
    grid.addColumn("Middle Name", "mname", 1.0)
    grid.addColumn("Gender", "gender", 1.0)
    grid.addColumn("Birthday", "birthday", 1.0)
    grid.addColumn("Place of Birth", "place of birth", 1.0)
    grid.addColumn("Citizenship", "citizenship", 1.0)
    grid.addColumn("Parents Name", "parents name", 1.0)
    grid.addColumn("Weight", "weight", 1.0)
    grid.addColumn("Height", "height", 1.0)
    
	grid.addWidgetHeaderRow()
    loadInfants()
}

func loadInfants
{
	grid.deleteAllRows()
	IDPSApiClient.getInstance().getInfant(func(response as DynamicMap) {
        var data = assert response.getDynamicMap("data")
        var records = data.getDynamicVector("records")
        if not records ||  records.getSize() < 1 {
             grid.addRow([ "NO data"])
        }
        else {
            foreach record as DynamicMap in records.toVector() {
                 addGrid(grid, record)
            }
        }
    })	
}

func addGrid(g as DataGridWidget, record as DynamicMap)
{
    var popIn = VerticalBoxWidget.forContext(context)
    var backColor = new LayerWithBackgroundColorWidget(context)
    var pop =  PopupWidget.forContentWidget(context, backColor)
    var popMes = HorizontalBoxWidget.forContext(context)
    var popButs = HorizontalBoxWidget.forContext(context)
    var editBtn = TextButtonWidget.forText(context, "Edit")
    var deleteBtn = TextButtonWidget.forText(context, "Delete")
    var cancelBtn = TextButtonWidget.forText(context, "Cancel")

    backColor.setWidgetColor(Color.white())
    backColor.addWidget(popIn)
    Widget.setLayoutSize(backColor,context.getWidthValue("200mm"),context.getHeightValue("120mm"))
    
    popIn.setWidgetMargin(context.getHeightValue("5mm"))
    pop.setWidgetModal(true)
    
    editBtn.setWidgetClickHandler(func{
        pop.hidePopup()
        var thisWidget final = this
        var nav = NavigationWidget.findNavigationWidget(thisWidget)
        nav.pushWidget(new IDPSInfantEdit(context).setInfantDetails(record))
    })

    deleteBtn.setWidgetClickHandler(func{
        context.showConfirmDialog("DELETING .....", "Do you want to delete this Data?",func{
            IDPSApiClient.getInstance().deleteInfant(record.getString("infantId"),func(resp as DynamicMap){
                context.showMessageDialog("Success","Data has been Deleted",func{
                    pop.hidePopup()
                    loadInfants()
                })
            },func(e as Error){
                context.showErrorDialog("Failed to delete!",func{
                    pop.hidePopup()
                })
            })
        },func{
            pop.hidePopup()
        })
    })

    cancelBtn.setWidgetClickHandler(func{
        pop.hidePopup()
    })
    popMes.addWidget(LabelWidget.forText(context, "What do you want to do with this record?"))
    popButs.addWidget(editBtn,1.0)
    popButs.addWidget(deleteBtn,1.0)
    popButs.addWidget(cancelBtn,1.0)

    popIn.addWidget(popMes, 1.0)
    popIn.addWidget(popButs, 1.0)
    var familyname = record.getString("fathermn") .. " , " .. record.getString("mothermn")  
    g.addRow([record.getString("infantId"), record.getString("lname"), record.getString("fname"), record.getString("mname"), record.getString("gender"), record.getString("dateofbirth"), record.getString("placeofbirth"), record.getString("citizenship"), familyname, record.getString("weight"), record.getString("height") ], func{
        pop.showPopup(backColor)
    })
}

func getWidgetTitle as string:
    return VALUE "title"
