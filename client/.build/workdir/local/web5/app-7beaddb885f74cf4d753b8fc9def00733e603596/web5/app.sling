class name app.MainScreen header extends jk.widget.ScreenForWidget public
{
	import jk.lang
	import jk.widget
	import jk.widget.common
	ctor
	func initialize override
	func main(args as array<string>) static as int #main
}
class name app.IDPSApiClient header extends jk.widget.web.JSONAPIClientWithGui public
{
	import jk.lang
	import jk.widget.web
	import jk.ui
	import jk.widget
	ctor
	func getInstance static as app.IDPSApiClient
	func create(context as jk.ui.GuiApplicationContext, parentWidget as jk.widget.Widget = null) static as app.IDPSApiClient
	func onError(error as jk.lang.Error, callback as function<void,jk.lang.Error>) override
	func onDefaultErrorHandler(error as jk.lang.Error) override
	func addTask(data as jk.lang.DynamicMap, callback as function<void,jk.lang.DynamicMap>, errorCallback as function<void,jk.lang.Error>)
	func updateTask(id as string, data as jk.lang.DynamicMap, callback as function<void,jk.lang.DynamicMap>, errorCallback as function<void,jk.lang.Error>)
	func deleteTask(id as string, callback as function<void,jk.lang.DynamicMap>, errorCallback as function<void,jk.lang.Error>)
	func getTasks(callback as function<void,jk.lang.DynamicMap>, errorCallback as function<void,jk.lang.Error> = null)
	func getWidgetDafaultErrorHandler as function<void,jk.lang.Error> #getterMethod
	func setWidgetDafaultErrorHandler(v as function<void,jk.lang.Error>) as app.IDPSApiClient #setterMethod
}
class name app.IDPSRegistration header implements jk.widget.TitledWidget extends jk.widget.LayerWidget public #widget
{
	import jk.lang
	import jk.lang
	import jk.ui
	import jk.gfx
	import jk.widget
	import jk.widget.common
	import jk.widget.form
	ctor(context as jk.ui.GuiApplicationContext)
	class name TaskModel header extends jk.json.JSONObjectAdapter implements jk.lang.StringObject public static
	{
		import jk.json
		ctor
		func setFname(value as string) as app.IDPSRegistration.TaskModel
		func getFname as string
		func setLname(value as string) as app.IDPSRegistration.TaskModel
		func getLname as string
		func setEmail(value as string) as app.IDPSRegistration.TaskModel
		func getEmail as string
		func setPassword(value as string) as app.IDPSRegistration.TaskModel
		func getPassword as string
		func setRe_password(value as string) as app.IDPSRegistration.TaskModel
		func getRe_password as string
		func toJsonObject override as object
		func fromJsonObject(o as object) override as bool
		func fromJsonString(o as string) as bool
		func toJsonString as string
		func toString as string
		func forJsonString(o as string) static as app.IDPSRegistration.TaskModel
		func forJsonObject(o as object) static as app.IDPSRegistration.TaskModel
	}
	func getWidgetTitle as string
	func createWidget override
}
