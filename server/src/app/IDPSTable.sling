import jk.sql
import jk.mysql
import jk.time
import jk.env

class:

const INFANT = "infant_tbl"
const USER = "idps_user"

model TableModelInfant static
{
    intantId as int
    infantFname as string
    infantLname as string
    infantMname as string
    infantGender as string
    infantCitizenship as string
    infantFatherMaidenName as string
    infantMotherMaidenName as string
    infantDateofBirth as long
    infantPlaceofBirth as string
    infantWeight as string
    infantHeight as string
    createdAt as long
    updatedAt as long
}

model TableModelUser static
{
    userId as int
    userFname as string
    userLname as string
    userEmail as string
    username as string
    password as string
    re_password as string
    createdAt as long
    updatedAt as long
}

func createTableInfant as SQLTableInfo
{
    var tbl = SQLTableInfo.forName(INFANT)

    tbl.addIntegerKeyColumn("infantId")
    tbl.addStringColumn("infantFname")
    tbl.addStringColumn("infantLname")
    tbl.addStringColumn("infantMname")
    tbl.addStringColumn("infantGender")
    tbl.addStringColumn("infantCitizenship")
    tbl.addStringColumn("infantFatherMaidenName")
    tbl.addStringColumn("infantMotherMaidenName")
    tbl.addLongColumn("infantBirthofDate")
    tbl.addStringColumn("infantPlaceofBirth")
    tbl.addStringColumn("infantWeight")
    tbl.addStringColumn("infantHeight")
    tbl.addLongColumn("createdAt")
    tbl.addLongColumn("updatedAt")

    return tbl
}

func createTableUser as SQLTableInfo
{
    var tbl = SQLTableInfo.forName(USER)

    tbl.addIntegerKeyColumn("userId")
    tbl.addStringColumn("userFname")
    tbl.addStringColumn("userLname")
    tbl.addStringColumn("userEmail")
    tbl.addStringColumn("username")
    tbl.addStringColumn("password")
    tbl.addStringColumn("re_password")
    tbl.addLongColumn("createdAt")
    tbl.addLongColumn("updatedAt")

    return tbl
}

// add to user table
func createUsers(db as MySQLDatabase, usermodel as TableModelUser) as TableModelUser
{
    assert usermodel
    usermodel.setCreatedAtValue(SystemClock.asUTCSeconds())
    assert db.executeSync(db.prepareInsertStatementSync(USER, usermodel.toDynamicMap()))
    return usermodel
}

// add to infant table
func createInfants(db as MySQLDatabase, infant as TableModelInfant) as TableModelInfant
{
    assert infant
    infant.setCreatedAtValue(SystemClock.asUTCSeconds())
    assert db.executeSync(db.prepareInsertStatementSync(INFANT, infant.toDynamicMap()))
    return infant
}

func getAllInfant (db as MySQLDatabase) as DynamicMap
{
    var v = new vector<TableModelInfant>
    var it = assert db.querySync(db.prepareQueryAllStatementSync(INFANT)):
        return null
    while it {
        var o = it.next()
        if not o:
            break
        var infant = TableModelInfant.forJsonObject(o)
        if not infant:
            continue
        v += infant
    }
    var d = new DynamicMap()
    d.setObject("records", v)
    return d
}

func getAllUser (db as MySQLDatabase) as DynamicMap
{
    var v = new vector<TableModelUser>
    var it = assert db.querySync(db.prepareQueryAllStatementSync(USER)):
        return null
    while it {
        var o = it.next()
        if not o:
            break
        var infant = TableModelUser.forJsonObject(o)
        if not infant:
            continue
        v += infant
    }
    var d = new DynamicMap()
    d.setObject("records", v)
    return d
}
