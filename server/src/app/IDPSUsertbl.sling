import jk.sql
import jk.mysql
import jk.time

class is IDPSDatabase:

const USER = "idps_user"

model UserModel static
{
    userId as int
    fname as string
    lname as string
    email as string
    username as string
    password as string
    re_password as string
    createdAt as long
    updatedAt as long
}

func createTableUser as SQLTableInfo
{
    var tbl = SQLTableInfo.forName(USER)
    tbl.addIntegerKeyColumn("userId")
    tbl.addStringColumn("fname")
    tbl.addStringColumn("lname")
    tbl.addStringColumn("email")
    tbl.addStringColumn("username")
    tbl.addStringColumn("password")
    tbl.addStringColumn("re_password")
    tbl.addLongColumn("createdAt")
    tbl.addLongColumn("updatedAt")
    return tbl
}



func createUsers(db as MySQLDatabase, usermodel as UserModel) as UserModel
{
    assert usermodel
    usermodel.setCreatedAtValue(SystemClock.asUTCSeconds())
    assert db.executeSync(db.prepareInsertStatementSync(USER, usermodel.toDynamicMap()))
    return usermodel
}

func getAllUser (db as MySQLDatabase) as DynamicMap
{
    var v = new vector<UserModel>
    var it = assert db.querySync(db.prepareQueryAllStatementSync(USER)):
        return null
    while it {
        var o = it.next()
        if not o:
            break
        var infant = UserModel.forJsonObject(o)
        if not infant:
            continue
        v += infant
    }
    var d = new DynamicMap()
    d.setObject("records", v)
    return d
}

func login(db as MySQLDatabase, loginConstraints as DynamicMap) as DynamicMap
{
    var v = new vector<UserModel>
    var it = assert db.querySync(db.prepareSelectStatementSync(USER, loginConstraints)):
        return null
    while it{
        var o = it.next()
        if not o:
            break
        var row = UserModel.forJsonObject(o)
        if not row:
            continue
        v += row
    }
    var data = new DynamicMap()
    data.setObject("records", v)
    return data
}

func deleteUser (db as MySQLDatabase, userId as string) as bool
{
    var userTbl = new UserModel()
    userTbl.setUserIdValue(String.toInteger(userId))
    return db.executeSync(db.prepareDeleteStatementSync(USER, userTbl.toDynamicMap()))
}

func editUser (db as MySQLDatabase, userId as string, dataTbl as UserModel) as bool
{
    assert dataTbl
    dataTbl.setUpdatedAtValue(SystemClock.asUTCSeconds())
    var userTbl = new UserModel()
    userTbl.setUserIdValue(String.toInteger(userId))
    return db.executeSync(db.prepareUpdateStatementSync(USER, userTbl.toDynamicMap(), dataTbl.toDynamicMap()))
}
