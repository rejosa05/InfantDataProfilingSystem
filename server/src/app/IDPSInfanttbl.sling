import jk.sql
import jk.mysql
import jk.time

class:

const INFANT = "infant_tbl"

model TableModelInfant static
{
    intantId as int
    infantFname as string
    infantLname as string
    infantMname as string
    infantGender as string
    infantCitizenship as string
    infantFatherMaidenName as string
    infantMotherMaidenName as string
    infantDateofBirth as long
    infantPlaceofBirth as string
    infantWeight as string
    infantHeight as string
    createdAt as long
    updatedAt as long
}

func createTableInfant as SQLTableInfo
{
    var tbl = SQLTableInfo.forName(INFANT)

    tbl.addIntegerKeyColumn("infantId")
    tbl.addStringColumn("infantFname")
    tbl.addStringColumn("infantLname")
    tbl.addStringColumn("infantMname")
    tbl.addStringColumn("infantGender")
    tbl.addStringColumn("infantCitizenship")
    tbl.addStringColumn("infantFatherMaidenName")
    tbl.addStringColumn("infantMotherMaidenName")
    tbl.addLongColumn("infantBirthofDate")
    tbl.addStringColumn("infantPlaceofBirth")
    tbl.addStringColumn("infantWeight")
    tbl.addStringColumn("infantHeight")
    tbl.addLongColumn("createdAt")
    tbl.addLongColumn("updatedAt")

    return tbl
}

func addInfants(db as MySQLDatabase, infant as TableModelInfant) as TableModelInfant
{
    assert infant
    infant.setCreatedAtValue(SystemClock.asUTCSeconds())
    assert db.executeSync(db.prepareInsertStatementSync(INFANT, infant.toDynamicMap()))
    return infant
}

func getAllInfant (db as MySQLDatabase) as DynamicMap
{
    var v = new vector<TableModelInfant>
    var it = assert db.querySync(db.prepareQueryAllStatementSync(INFANT)):
        return null
    while it {
        var o = it.next()
        if not o:
            break
        var infant = TableModelInfant.forJsonObject(o)
        if not infant:
            continue
        v += infant
    }
    var d = new DynamicMap()
    d.setObject("records", v)
    return d
}
