import jk.sql
import jk.mysql
import jk.time

class:

const TABLENAME = "infant_tbl"

model TableModelInfant static
{
    infant as int
    fname as string
    lname as string
    mname as string
    gender as string
    citizenship as string
    fathermn as string
    mothermn as string
    dateofbirth as string
    placeofbirth as string
    weight as string
    height as string
    createdAt as long
    updatedAt as long
}

func createTableInfant as SQLTableInfo
{
    var tbl = SQLTableInfo.forName(TABLENAME)

    tbl.addIntegerKeyColumn("infantId")
    tbl.addStringColumn("fname")
    tbl.addStringColumn("lname")
    tbl.addStringColumn("mname")
    tbl.addStringColumn("gender")
    tbl.addStringColumn("citizenship")
    tbl.addStringColumn("fathermn")
    tbl.addStringColumn("mothermn")
    tbl.addStringColumn("dateofbirth")
    tbl.addStringColumn("placeofbirth")
    tbl.addStringColumn("weight")
    tbl.addStringColumn("height")
    tbl.addLongColumn("createdAt")
    tbl.addLongColumn("updatedAt")

    return tbl
}

func addInfants(db as MySQLDatabase, infant as TableModelInfant) as TableModelInfant
{
    assert infant
    infant.setCreatedAtValue(SystemClock.asUTCSeconds())
    assert db.executeSync(db.prepareInsertStatementSync(TABLENAME, infant.toDynamicMap()))
    return infant
}

func getAllInfant (db as MySQLDatabase) as DynamicMap
{
    var v = new vector<TableModelInfant>
    var it = assert db.querySync(db.prepareQueryAllStatementSync(TABLENAME)):
        return null
    while it {
        var o = it.next()
        if not o:
            break
        var infant = TableModelInfant.forJsonObject(o)
        if not infant:
            continue
        v += infant
    }
    var d = new DynamicMap()
    d.setObject("records", v)
    return d
}
