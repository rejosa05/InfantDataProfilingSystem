import jk.http.client
import jk.http.worker

class is HTTPRPCRouter #webapi2:

model RequestInfant
{
    fname as string
    lname as string
    mname as string
    gender as string
    citizenship as string
    fathermn as string
    mothermn as string
    dateofbirth as string
    placeofbirth as string
    weight as string
    height as string
}

model RequestUser
{
    fname as string
    lname as string
    email as string
    username as string
    password as string
    re_password as string
}

GET "/getinfant"
{
    var infant = assert IDPSInfanttbl.getAllInfant(getDatabase().getDb())
    sendOk infant
}

GET "/getuser"
{
    var user = assert IDPSUsertbl.getAllUser(getDatabase().getDb())
    sendOk user
}

POST "/insertUser"
{
    var reqData = assert RequestUser.forJsonString(req.getBodyString()):
        sendError "invalidRequest"
    var u = new IDPSUsertbl.UserModel
    u.setFname(reqData.getFname())
    u.setLname(reqData.getLname())
    u.setEmail(reqData.getEmail())
    u.setUsername(reqData.getUsername())
    u.setPassword(reqData.getPassword())
    u.setRe_password(reqData.getRe_password())
    var account = assert IDPSUsertbl.createUsers(getDatabase().getDb(), u):
        sendError "failedToSave"
    sendOk account
}

POST "/insertInfant"
{
    var reqData = assert RequestInfant.forJsonString(req.getBodyString()):
        sendError "invalidRequest"
    var infnt = new IDPSInfanttbl.TableModelInfant
    infnt.setFname(reqData.getFname())
    infnt.setLname(reqData.getLname())
    infnt.setMname(reqData.getMname())
    infnt.setGender(reqData.getGender())
    infnt.setCitizenship(reqData.getCitizenship())
    infnt.setFathermn(reqData.getFathermn())
    infnt.setMothermn(reqData.getMothermn())
    infnt.setDateofbirth(reqData.getDateofbirth())
    infnt.setPlaceofbirth(reqData.getPlaceofbirth())
    infnt.setWeight(reqData.getWeight())
    infnt.setHeight(reqData.getHeight())
    var infant = assert IDPSInfanttbl.addInfants(getDatabase().getDb(), infnt):
        sendError "failedToSave"
    sendOk infant
}

POST "/login"
{
    var requestData = assert IDPSUsertbl.UserModel.forJsonString(req.getBodyString()):
        sendError "invalidRequest"
    var info = new IDPSUsertbl.UserModel
    info.setUsername(requestData.getUsername())
    info.setPassword(requestData.getPassword())
    var login = assert IDPSUsertbl.login(getDatabase().getDb(), info.toDynamicMap()):
        sendError "loginFailed"
    sendOk login
}

var db as IDPSDatabase
var cor = IDPSConfig.getCorsUtil()

func getDatabase as IDPSDatabase
{
    if not db {
        db = IDPSDatabase.forContext(getCtx())
        db.updateTables()
    }
    return db
}

func postProcess(req as HTTPWorkerRequest, resp as HTTPWorkerResponse) override:
    cor.handleWorkerRequest(req, resp)
