import jk.http.server
import jk.http.worker

class is HTTPRPCRouter #webapi2:

GET "/infants"
{
    var infant = assert IDPSTable.getAllInfant(getDatabase().getDb())
    sendOk infant
}

GET "/user"
{
    var user = assert IDPSTable.getAllUser(getDatabase().getDb())
    sendOk user
}

POST "/user"
{
    var reqData = assert IDPSTable.TableModelUser.forJsonString(req.getBodyString()):
        sendError "invalidRequest"
    var user = new IDPSTable.TableModelUser
    user.setUserFname(reqData.getUserFname())
    user.setUserLname(reqData.getUserLname())
    user.setUserEmail(reqData.getUserEmail())
    user.setUsername(reqData.getUsername())
    user.setPassword(reqData.getPassword())
    user.setRe_password(reqData.getRe_password())
    var username = assert IDPSTable.addUser(getDatabase().getDb(), user):
        sendError "failedToSaveTask"
    sendOk username
}

POST "/infants"
{
}

PUT "/task/:id"
{
}

DELETE "/task/:id"
{
}

var db as IDPSDatabase
var cor = IDPSConfig.getCorsUtil()

func getDatabase as IDPSDatabase
{
    if not db {
        db = IDPSDatabase.forContext(getCtx())
        db.updateTables()
    }
    return db
}

func postProcess(req as HTTPWorkerRequest, resp as HTTPWorkerResponse) override:
    cor.handleWorkerRequest(req, resp)
