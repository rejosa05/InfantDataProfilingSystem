class name app.IDPSDatabase header public
{
	import jk.lang
	import jk.log
	import jk.sqlite
	import jk.mysql
	import jk.sql
	import jk.env
	import jk.time
	ctor
	class name Task header extends jk.json.JSONObjectAdapter implements jk.lang.StringObject public static static
	{
		import jk.json
		ctor
		func setId(value as string) as app.IDPSDatabase.Task
		func getId as string
		func setFname(value as string) as app.IDPSDatabase.Task
		func getFname as string
		func setLname(value as string) as app.IDPSDatabase.Task
		func getLname as string
		func setEmail(value as string) as app.IDPSDatabase.Task
		func getEmail as string
		func setPassword(value as string) as app.IDPSDatabase.Task
		func getPassword as string
		func setRe_password(value as string) as app.IDPSDatabase.Task
		func getRe_password as string
		func setTimeStampAddedValue(value as long) as app.IDPSDatabase.Task
		func getTimeStampAddedValue as long
		func setTimeStampAdded(value as jk.lang.LongIntegerObject) as app.IDPSDatabase.Task
		func getTimeStampAdded as jk.lang.LongIntegerObject
		func setTimeStampLastUpdatedValue(value as long) as app.IDPSDatabase.Task
		func getTimeStampLastUpdatedValue as long
		func setTimeStampLastUpdated(value as jk.lang.LongIntegerObject) as app.IDPSDatabase.Task
		func getTimeStampLastUpdated as jk.lang.LongIntegerObject
		func toJsonObject override as object
		func fromJsonObject(o as object) override as bool
		func fromJsonString(o as string) as bool
		func toJsonString as string
		func toString as string
		func forJsonString(o as string) static as app.IDPSDatabase.Task
		func forJsonObject(o as object) static as app.IDPSDatabase.Task
	}
	var IDPS public static const as string
	func forContext(ctx as jk.log.LoggingContext) static as app.IDPSDatabase
	func updateTable(tbl as jk.sql.SQLTableInfo)
	func updateTables
	func addTask(task as app.IDPSDatabase.Task) as app.IDPSDatabase.Task
	func updateTask(id as string, task as app.IDPSDatabase.Task) as bool
	func deleteTask(id as string) as bool
	func getTasks as jk.lang.DynamicMap
	func close
	func getDb as jk.mysql.MySQLDatabase #getterMethod
	func setDb(v as jk.mysql.MySQLDatabase) as app.IDPSDatabase #setterMethod
}
class name app.IDPSApiServer header extends jk.server.web.WebServer public
{
	import jk.lang
	import jk.http.server
	import jk.server.web
	ctor
	func initializeServer(server as jk.http.server.HTTPServer) override as bool
	func initializeApplication override as bool
}
class name app.IDPSApiHandler header extends jk.http.worker.HTTPRPCRouter public
{
	import jk.lang
	import jk.http.worker
	import jk.http.server
	ctor
	class name IdpsRequest header extends jk.json.JSONObjectAdapter implements jk.lang.StringObject public static static
	{
		import jk.json
		ctor
		func setFname(value as string) as app.IDPSApiHandler.IdpsRequest
		func getFname as string
		func setLname(value as string) as app.IDPSApiHandler.IdpsRequest
		func getLname as string
		func setEmail(value as string) as app.IDPSApiHandler.IdpsRequest
		func getEmail as string
		func setPassword(value as string) as app.IDPSApiHandler.IdpsRequest
		func getPassword as string
		func setRe_password(value as string) as app.IDPSApiHandler.IdpsRequest
		func getRe_password as string
		func toJsonObject override as object
		func fromJsonObject(o as object) override as bool
		func fromJsonString(o as string) as bool
		func toJsonString as string
		func toString as string
		func forJsonString(o as string) static as app.IDPSApiHandler.IdpsRequest
		func forJsonObject(o as object) static as app.IDPSApiHandler.IdpsRequest
	}
	func getDatabase as app.IDPSDatabase
	func postProcess(req as jk.http.worker.HTTPWorkerRequest, resp as jk.http.worker.HTTPWorkerResponse) override
	func initRoutes override
}
class name app.IDPSConfig header public
{
	import jk.lang
	import jk.env
	import jk.http.server.cors
	ctor
	func getAllowedOrigins as array
	func getCorsUtil as jk.http.server.cors.HTTPServerCORSUtil
}
